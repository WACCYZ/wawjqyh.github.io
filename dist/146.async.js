(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([[146],{s9BI:function(s,a){s.exports='<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/round" target="_blank">\u539f\u6587\u94fe\u63a5</a>\n<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round" target="_blank">en</a></p>\n<h1 id="mathround">Math.round()</h1>\n<p>Math.round() \u51fd\u6570\u8fd4\u56de\u4e00\u4e2a\u6570\u5b57\u56db\u820d\u4e94\u5165\u540e\u6700\u63a5\u8fd1\u7684\u6574\u6570\u503c\u3002</p>\n<h2 id="\u8bed\u6cd5">\u8bed\u6cd5</h2>\n<pre><code class="language-javascript">Math.<span class="hljs-built_in">round</span>(<span class="hljs-symbol">x</span>)</code></pre>\n<h3 id="\u53c2\u6570">\u53c2\u6570</h3>\n<ul>\n<li><code>x</code> \u4e00\u4e2a\u6570\u503c</li>\n</ul>\n<h3 id="\u8fd4\u56de\u503c">\u8fd4\u56de\u503c</h3>\n<p>\u7ed9\u5b9a\u6570\u5b57\u7684\u503c\u56db\u820d\u4e94\u5165\u5230\u6700\u63a5\u8fd1\u7684\u6574\u6570\u3002</p>\n<h2 id="\u63cf\u8ff0">\u63cf\u8ff0</h2>\n<p>\u5982\u679c number \u7684\u5c0f\u6570\u90e8\u5206\u662f .5 \u6216\u8005\u66f4\u5927\uff0c\u8f93\u5165\u7684\u53c2\u6570\u88ab\u56db\u820d\u4e94\u5165\u5230\u4e0b\u4e00\u4e2a\u7edd\u5bf9\u503c\u66f4\u5927\u7684\u6574\u6570\u3002 \u5982\u679c number \u7684\u5c0f\u6570\u90e8\u5206\u5c0f\u4e8e .5\uff0c\u8f93\u5165\n\u7684\u53c2\u6570\u88ab\u56db\u820d\u4e94\u5165\u5230\u4e0b\u4e00\u4e2a\u7edd\u5bf9\u503c\u66f4\u5c0f\u7684\u6574\u6570\u3002</p>\n<p>\u5982\u679c number \u7684\u5c0f\u6570\u90e8\u5206\u6070\u597d\u7b49\u4e8e .5\uff0c\u8f93\u5165\u7684\u53c2\u6570\u88ab\u56db\u820d\u4e94\u5165\u5230\u4e0b\u4e00\u4e2a\u5728\u6b63\u65e0\u7a77\uff08+\u221e\uff09\u65b9\u5411\u4e0a\u7684\u6574\u6570\u3002\u6ce8\u610f\uff0c\u4e0e\u5f88\u591a\u5176\u4ed6\u8bed\u8a00\u4e2d\u7684round()\n\u51fd\u6570\u4e0d\u540c\uff0cMath.round()\u5e76\u4e0d\u603b\u662f\u56db\u820d\u4e94\u5165\u5230\u8fdc\u79bb0\u7684\u65b9\u5411\uff08\u5c24\u5176\u662f\u5728\u8d1f\u6570\u7684\u5c0f\u6570\u90e8\u5206\u6070\u597d\u7b49\u4e8e.5\u7684\u60c5\u51b5\u4e0b\uff09\u3002</p>\n<p>\u56e0\u4e3a round \u662f Math \u7684\u9759\u6001\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u7528\u4f5c Math.round()\uff0c\u800c\u4e0d\u662f\u4f5c\u4e3a\u4e00\u4e2a\u4f60\u81ea\u5df1\u521b\u5efa\u7684 Math \u5bf9\u8c61\u7684\u65b9\u6cd5\u3002</p>\n<h2 id="\u793a\u4f8b">\u793a\u4f8b</h2>\n<h3 id="\u4f7f\u7528-mathround">\u4f7f\u7528 Math.round</h3>\n<pre><code class="language-javascript"><span class="hljs-comment">// \u8fd4\u56de 20</span>\n<span class="hljs-symbol">x</span> = Math.<span class="hljs-built_in">round</span>(<span class="hljs-number">20.49</span>);\n\n<span class="hljs-comment">// \u8fd4\u56de 21</span>\n<span class="hljs-symbol">x</span> = Math.<span class="hljs-built_in">round</span>(<span class="hljs-number">20.5</span>);\n\n<span class="hljs-comment">// \u8fd4\u56de -20</span>\n<span class="hljs-symbol">x</span> = Math.<span class="hljs-built_in">round</span>(<span class="hljs-number">-20.5</span>);\n\n<span class="hljs-comment">// \u8fd4\u56de -21</span>\n<span class="hljs-symbol">x</span> = Math.<span class="hljs-built_in">round</span>(<span class="hljs-number">-20.51</span>)\n\n<span class="hljs-comment">// Returns the value 1 (!)</span>\n<span class="hljs-comment">// Note the rounding error because of inaccurate floating point arithmetics</span>\n<span class="hljs-comment">// Compare this with Math.round10(1.005, -2) from the example below</span>\n<span class="hljs-symbol">x</span> = Math.<span class="hljs-built_in">round</span>(<span class="hljs-number">1.005</span>*<span class="hljs-number">100</span>)/<span class="hljs-number">100</span>;</code></pre>\n<h3 id="\u5341\u8fdb\u5236\u8c03\u6574">\u5341\u8fdb\u5236\u8c03\u6574</h3>\n<pre><code class="language-javascript"><span class="hljs-comment">// Closure</span>\n(<span class="hljs-keyword">function</span><span class="hljs-literal">()</span>{\n\n  <span class="hljs-comment">/**\n   * Decimal adjustment of a number.\n   *\n   * @param {String}  type  The type of adjustment.\n   * @param {Number}  value The number.\n   * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).\n   * @returns {Number}      The adjusted value.\n   */</span>\n  <span class="hljs-keyword">function</span> decimal<span class="hljs-constructor">Adjust(<span class="hljs-params">type</span>, <span class="hljs-params">value</span>, <span class="hljs-params">exp</span>)</span> {\n    <span class="hljs-comment">// If the exp is undefined or zero...</span>\n    <span class="hljs-keyword">if</span> (typeof exp<span class="hljs-operator"> === </span>\'undefined\'<span class="hljs-operator"> || </span>+exp<span class="hljs-operator"> === </span><span class="hljs-number">0</span>) {\n      return Math<span class="hljs-literal">[<span class="hljs-identifier">type</span>]</span>(value);\n    }\n    value = +value;\n    exp = +exp;\n    <span class="hljs-comment">// If the value is not a number or the exp is not an integer...</span>\n    <span class="hljs-keyword">if</span> (is<span class="hljs-constructor">NaN(<span class="hljs-params">value</span>)</span><span class="hljs-operator"> || </span>!(typeof exp<span class="hljs-operator"> === </span>\'number\'<span class="hljs-operator"> &amp;&amp; </span>exp % <span class="hljs-number">1</span><span class="hljs-operator"> === </span><span class="hljs-number">0</span>)) {\n      return NaN;\n    }\n    <span class="hljs-comment">// Shift</span>\n    value = value.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>.split(<span class="hljs-character">\'e\'</span>);\n    value = Math<span class="hljs-literal">[<span class="hljs-identifier">type</span>]</span>(+(value<span class="hljs-literal">[<span class="hljs-number">0</span>]</span> + <span class="hljs-character">\'e\'</span> + (value<span class="hljs-literal">[<span class="hljs-number">1</span>]</span> ? (+value<span class="hljs-literal">[<span class="hljs-number">1</span>]</span> - exp) : -exp)));\n    <span class="hljs-comment">// Shift back</span>\n    value = value.<span class="hljs-keyword">to</span><span class="hljs-constructor">String()</span>.split(<span class="hljs-character">\'e\'</span>);\n    return +(value<span class="hljs-literal">[<span class="hljs-number">0</span>]</span> + <span class="hljs-character">\'e\'</span> + (value<span class="hljs-literal">[<span class="hljs-number">1</span>]</span> ? (+value<span class="hljs-literal">[<span class="hljs-number">1</span>]</span> + exp) : exp));\n  }\n\n  <span class="hljs-comment">// Decimal round</span>\n  <span class="hljs-keyword">if</span> (!<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>round10) {\n    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>round10 = <span class="hljs-keyword">function</span>(value, exp) {\n      return decimal<span class="hljs-constructor">Adjust(\'<span class="hljs-params">round</span>\', <span class="hljs-params">value</span>, <span class="hljs-params">exp</span>)</span>;\n    };\n  }\n  <span class="hljs-comment">// Decimal floor</span>\n  <span class="hljs-keyword">if</span> (!<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>floor10) {\n    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>floor10 = <span class="hljs-keyword">function</span>(value, exp) {\n      return decimal<span class="hljs-constructor">Adjust(\'<span class="hljs-params">floor</span>\', <span class="hljs-params">value</span>, <span class="hljs-params">exp</span>)</span>;\n    };\n  }\n  <span class="hljs-comment">// Decimal ceil</span>\n  <span class="hljs-keyword">if</span> (!<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>ceil10) {\n    <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>ceil10 = <span class="hljs-keyword">function</span>(value, exp) {\n      return decimal<span class="hljs-constructor">Adjust(\'<span class="hljs-params">ceil</span>\', <span class="hljs-params">value</span>, <span class="hljs-params">exp</span>)</span>;\n    };\n  }\n\n})<span class="hljs-literal">()</span>;\n\n<span class="hljs-comment">// Round</span>\n<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>round10(<span class="hljs-number">55.55</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// 55.6</span>\n<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>round10(<span class="hljs-number">55.549</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// 55.5</span>\n<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>round10(<span class="hljs-number">55</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 60</span>\n<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>round10(<span class="hljs-number">54.9</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 50</span>\n<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>round10(-<span class="hljs-number">55.55</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// -55.5</span>\n<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>round10(-<span class="hljs-number">55.551</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// -55.6</span>\n<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>round10(-<span class="hljs-number">55</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// -50</span>\n<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>round10(-<span class="hljs-number">55.1</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// -60</span>\n<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>round10(<span class="hljs-number">1.005</span>, -<span class="hljs-number">2</span>); <span class="hljs-comment">// 1.01 -- compare this with Math.round(1.005*100)/100 above</span>\n<span class="hljs-comment">// Floor</span>\n<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>floor10(<span class="hljs-number">55.59</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// 55.5</span>\n<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>floor10(<span class="hljs-number">59</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 50</span>\n<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>floor10(-<span class="hljs-number">55.51</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// -55.6</span>\n<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>floor10(-<span class="hljs-number">51</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// -60</span>\n<span class="hljs-comment">// Ceil</span>\n<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>ceil10(<span class="hljs-number">55.51</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// 55.6</span>\n<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>ceil10(<span class="hljs-number">51</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// 60</span>\n<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>ceil10(-<span class="hljs-number">55.59</span>, -<span class="hljs-number">1</span>); <span class="hljs-comment">// -55.5</span>\n<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>ceil10(-<span class="hljs-number">59</span>, <span class="hljs-number">1</span>); <span class="hljs-comment">// -50</span></code></pre>\n<h2 id="\u89c4\u8303">\u89c4\u8303</h2>\n<table>\n<thead>\n<tr>\n<th align="left">Specification</th>\n<th align="left">Status</th>\n<th align="left">Comment</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align="left">ECMAScript 1rd Edition (ECMA-262)</td>\n<td align="left">Standard</td>\n<td align="left">Initial definition</td>\n</tr>\n<tr>\n<td align="left">ECMAScript 5.1 (ECMA-262)</td>\n<td align="left">Standard</td>\n<td align="left"></td>\n</tr>\n<tr>\n<td align="left">ECMAScript 2015 (6th Edition, ECMA-262)</td>\n<td align="left">Standard</td>\n<td align="left"></td>\n</tr>\n</tbody></table>\n'}}]);